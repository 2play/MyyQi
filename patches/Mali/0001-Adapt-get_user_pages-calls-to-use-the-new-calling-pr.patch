From edbbbc2e0ae58db702c13c638a47ef95f8fd16c3 Mon Sep 17 00:00:00 2001
From: Myy <myy@miouyouyou.fr>
Date: Sun, 13 Nov 2016 08:43:34 +0000
Subject: [PATCH] Adapt get_user_pages calls to use the new calling procedure

get_user_pages and get_user_pages_remote has a new signature.

See kernel commit 9beae1ea89305a9667ceaab6d0bf46a045ad71e7 :
- https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/diff/?id=9beae1ea89305a9667ceaab6d0bf46a045ad71e7

Basically, before get_user_pages was called like this, for example :

 	pinned_pages = get_user_pages_remote(NULL, mm,
 			address,
 			alloc->imported.user_buf.nr_pages,
			reg->flags & KBASE_REG_GPU_WR,
			0, pages, NULL);

The 'reg->flags & KBASE_REG_GPU_WR' was used as the 'write' argument,
and the next '0' was used as a 'force' argument.

Now, both values are passed as flags like this :
unsigned int user_pages_flags = 0;
if (allow_write_test)
  user_pages_flags |= FOLL_WRITE;
if (allow_force)
  user_pages_flags |= FOLL_FORCE;

get_user_pages_remote(?,?,?,?,user_pages_flags, ?, ?)

So, correcting the first example would lead to something like this :

	unsigned int user_pages_flags = 0;
	if (reg->flags & KBASE_REG_GPU_WR)
		user_pages_flags |= FOLL_WRITE;

        pinned_pages = get_user_pages_remote(NULL, mm,
                        address,
                        alloc->imported.user_buf.nr_pages,
                        user_pages_flags, pages, NULL);

Signed-off-by: Myy <myy@miouyouyou.fr>
---
 drivers/gpu/arm/midgard/mali_kbase_mem.c       | 12 +++++++++++-
 drivers/gpu/arm/midgard/mali_kbase_mem_linux.c |  9 ++++++++-
 2 files changed, 19 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/arm/midgard/mali_kbase_mem.c b/drivers/gpu/arm/midgard/mali_kbase_mem.c
index 60d31ac..4f6b60d 100644
--- a/drivers/gpu/arm/midgard/mali_kbase_mem.c
+++ b/drivers/gpu/arm/midgard/mali_kbase_mem.c
@@ -2027,6 +2027,7 @@ static int kbase_jd_user_buf_map(struct kbase_context *kctx,
 	struct device *dev;
 	unsigned long offset;
 	unsigned long local_size;
+	unsigned int user_pages_flags = 0;
 
 	alloc = reg->gpu_alloc;
 	pa = kbase_get_gpu_phy_pages(reg);
@@ -2043,12 +2044,21 @@ static int kbase_jd_user_buf_map(struct kbase_context *kctx,
 			alloc->imported.user_buf.nr_pages,
 			reg->flags & KBASE_REG_GPU_WR,
 			0, pages, NULL);
-#else
+#elif LINUX_VERSION_CODE < KERNEL_VERSION(4, 8, 0)
 	pinned_pages = get_user_pages_remote(NULL, mm,
 			address,
 			alloc->imported.user_buf.nr_pages,
 			reg->flags & KBASE_REG_GPU_WR,
 			0, pages, NULL);
+#else
+	if (reg->flags & KBASE_REG_GPU_WR)
+		user_pages_flags |= FOLL_WRITE;
+
+	pinned_pages = get_user_pages_remote(NULL, mm,
+			address,
+			alloc->imported.user_buf.nr_pages,
+			user_pages_flags,
+			pages, NULL);
 #endif
 
 	if (pinned_pages <= 0)
diff --git a/drivers/gpu/arm/midgard/mali_kbase_mem_linux.c b/drivers/gpu/arm/midgard/mali_kbase_mem_linux.c
index b6dac55..80e876f 100644
--- a/drivers/gpu/arm/midgard/mali_kbase_mem_linux.c
+++ b/drivers/gpu/arm/midgard/mali_kbase_mem_linux.c
@@ -1121,6 +1121,7 @@ static struct kbase_va_region *kbase_mem_from_user_buffer(
 	long faulted_pages;
 	int zone = KBASE_REG_ZONE_CUSTOM_VA;
 	bool shared_zone = false;
+	unsigned int user_pages_flags = 0;
 
 	*va_pages = (PAGE_ALIGN(address + size) >> PAGE_SHIFT) -
 		PFN_DOWN(address);
@@ -1192,9 +1193,15 @@ static struct kbase_va_region *kbase_mem_from_user_buffer(
 #if LINUX_VERSION_CODE < KERNEL_VERSION(4, 6, 0)
 	faulted_pages = get_user_pages(current, current->mm, address, *va_pages,
 			reg->flags & KBASE_REG_GPU_WR, 0, NULL, NULL);
-#else
+#elif LINUX_VERSION_CODE < KERNEL_VERSION(4, 8, 0)
 	faulted_pages = get_user_pages(address, *va_pages,
 			reg->flags & KBASE_REG_GPU_WR, 0, NULL, NULL);
+#else
+	if (reg->flags & KBASE_REG_GPU_WR)
+		user_pages_flags |= FOLL_WRITE;
+
+	faulted_pages = get_user_pages(address, *va_pages,
+			user_pages_flags, NULL, NULL);
 #endif
 	up_read(&current->mm->mmap_sem);
 
-- 
2.4.10

